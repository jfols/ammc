/////////////////
// Semantic.gs // for SCSS: http://sass-lang.com/
/////////////////

// Defaults which you can freely override
$column-width: 10%;
$gutter-width: 0;
$columns: 10;

// Utility function â€” you should never need to modify this
@function gridsystem-width($columns:$columns) {
    @return ($column-width * $columns) + ($gutter-width * $columns);
}

// Set $total-width to 100% for a fluid layout
//$total-width: gridsystem-width($columns);
$total-width: 100%;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// $min-width: 999999;
// $correction: 0.5 / $min-width * 100;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
    *zoom:1;

    &:before,
    &:after {
        content:"";
        display:table;
    }
    &:after {
        clear:both;
    }
}


//////////
// GRID //
//////////

body {
    width: 100%;
    @include clearfix();
}

@mixin row($columns:$columns) {
    display: block;
    width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
    margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
    // *width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns))-$correction;
    // *margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)-$correction;
    @include clearfix();
}
@mixin column($x,$columns:$columns) {
    display: inline;
    float: left;
    width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
    margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns));
    // *width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns))-$correction;
    // *margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns))-$correction;
}
@mixin push($offset:1) {
    margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
@mixin pull($offset:1) {
    margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

/////////////////////
// HELPER CLASSESS //
/////////////////////

// grid
.row             { @include row(10); }
.one.column      { @include column(1); }
.two.column      { @include column(2); }
.three.column    { @include column(3); }
.four.column     { @include column(4); }
.five.column     { @include column(5); }
.six.column      { @include column(6); }
.seven.column    { @include column(7); }
.eight.column    { @include column(8); }
.nine.column     { @include column(9); }
.ten.column      { @include column(10); }
.half.column     { @include column(5); }
.oneThird.column { @include column(3.3); }
.twoThird.column { @include column(6.6); }

// offsets
.push.halfCol  { @include push(0.5); }
.push.oneCol   { @include push(1); }
.push.twoCol   { @include push(2); }
.push.threeCol { @include push(3); }
.push.fourCol  { @include push(4); }
.push.fiveCol  { @include push(5); }
.pull.oneCol   { @include pull(1); }
.pull.twoCol   { @include pull(2); }
.pull.threeCol { @include pull(3); }
.pull.fourCol  { @include pull(4); }
.pull.fiveCol  { @include pull(5); }

@include responsive(medium-screens) {
    .two.column   { @include column(3.3); padding-top: 1rem; }
    .push.halfCol  { @include push(0.5); }
}

@include responsive(small-screens) {
    .two.column   { @include column(3.3); padding-top: 1rem; }
    .four.column  { @include column(10); }
    .five.column  { @include column(9); }
    .half.column  { @include column(10); }
    .six.column  { @include column(10); }
    .push.halfCol  { @include push(0.5); }
}

@include responsive(smallest-screens) {
    .two.column { @include column(10); padding-top: 1rem; }
    .push.halfCol  { @include push(0.5); }
}